server {
    listen 80;
    root /static/;
	index index.html;

	location / {
		try_files $uri $uri/ =404;
	}

    location /api/login {
        content_by_lua_block {
            local json = require('cjson')
            function retError (errorMsg, status)
              ngx.status = status
              ngx.header.content_type = "application/json; charset=utf-8"
              ngx.say(json.encode({error = errorMsg}))
              return ngx.exit(status)
            end

            local session = require "resty.session".start()
            local args, err = ngx.req.get_uri_args()
            if (err ~= nil) then
                return retError(err, ngx.HTTP_BAD_REQUEST)
            end

            local username = args.username
            if (username == nil) then
                return retError("No username provided", ngx.HTTP_UNAUTHORIZED)
            end

            session.data.user = username
            session:save()
            ngx.header.content_type = "application/json; charset=utf-8"
            ngx.say(json.encode({ msg = "OK", user = username }))
            return ngx.exit(ngx.OK);
        }
    }

    location /api/query {
        content_by_lua_block {
            local json = require('cjson')

            function retError (errorMsg, status)
              ngx.status = status
              ngx.header.content_type = "application/json; charset=utf-8"
              ngx.say(json.encode({error = errorMsg}))
              return ngx.exit(status)
            end

            local session = require "resty.session".start()
            local user = session.data.user

            if (user == nil) then
                return retError("Auth required", ngx.HTTP_UNAUTHORIZED)
            end

            local args, err = ngx.req.get_uri_args()
            if (err ~= nil) then
                return retError(err, ngx.HTTP_BAD_REQUEST)
            end

            local city = args.city
            if (city == nil) then
                return retError("No city provided", ngx.HTTP_BAD_REQUEST)
            end
            city = string.gsub(city, " ", "")

            local query = "SELECT * FROM shops WHERE city = '" .. city .. "'"
            if (args.address ~= nil) then
                addr = string.gsub(args.address, " ", "")
                query = query .. " AND address LIKE '%" .. addr .. "%';"
            else
                query = query .. ';'
            end

            local sqlite3 = require("lsqlite3complete")
            local db = sqlite3.open("/storage/storage.db", sqlite3.SQLITE_OPEN_READ)

            function fetch(db, query)
                res = {}
                for rid,city,addr,img in db:urows(query) do
                    res[#res+1]={city = city, address = addr, image = img}
                end
                return res
            end

            local ran, res = pcall(fetch, db, query)
            if not ran then
                res = res .. " on query: '" .. query .. "'"
                return retError(res, ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            ngx.header.content_type = "application/json; charset=utf-8"
            ngx.say(json.encode({shops = res}))
            return ngx.exit(ngx.OK);
        }
    }
}
